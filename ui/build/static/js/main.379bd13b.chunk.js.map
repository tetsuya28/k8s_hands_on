{"version":3,"sources":["Atoms/ItemCard.js","Atoms/Form.js","App.js","serviceWorker.js","index.js"],"names":["TodoCard","props","data","useState","itemInfo","setItemInfo","postTodoStatus","axios","post","id","then","window","location","reload","useEffect","is_done","onClick","name","useStyle","makeStyles","form","color","button","margin","TodoForm","classes","todoName","setTodoName","FormControl","InputLabel","htmlFor","className","Input","aria-describedby","onChange","e","target","value","required","FormHelperText","Button","variant","alert","params","defaults","headers","App","todos","setTodos","endpoint","process","get","response","length","map","todo","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uKAoCeA,G,MAjCE,SAAAC,GACf,IAAMC,EAAOD,EAAMC,KADK,EAEQC,qBAFR,mBAEjBC,EAFiB,KAEPC,EAFO,KAIlBC,EAAiB,WACrBC,IAAMC,KAAK,SAAWN,EAAKO,GAAK,SAC7BC,MAAK,WACJC,OAAOC,SAASC,aAQtB,OAJAC,qBAAU,WACRT,EAAYH,KACX,CAACA,IAGF,6BAEIE,GAEyB,IAArBA,EAASW,QACP,yBAAMC,QAASV,GAAf,UAAmCF,EAASa,MAE1C,yBAAMD,QAASV,GAAf,UAAmCF,EAASa,MAGhD,iC,qDCxBNC,E,MAAWC,GAAW,CAC1BC,KAAM,CACJC,MAAO,SAETC,OAAQ,CACNC,OAAQ,MAsCGC,EAlCE,SAAAvB,GACf,IAAMwB,EAAUP,EAASjB,GADD,EAEQE,mBAAS,IAFjB,mBAEjBuB,EAFiB,KAEPC,EAFO,KAsBxB,OACE,6BACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,YAAYC,UAAWN,EAAQL,MAAnD,aACA,kBAACY,EAAA,EAAD,CAAOvB,GAAG,YAAYwB,mBAAiB,iBAAiBC,SAtB3C,SAAAC,GACjBR,EAAYQ,EAAEC,OAAOC,QAqB6DN,UAAWN,EAAQL,KAAMkB,UAAQ,IAC/G,kBAACC,EAAA,EAAD,CAAgB9B,GAAG,iBAAiBsB,UAAWN,EAAQL,MAAvD,8FACA,kBAACoB,EAAA,EAAD,CAAQC,QAAQ,WAAWpB,MAAM,UAAUL,QApBhC,WACf,GAAiB,KAAbU,EAEF,OADAgB,MAAM,mCACC,EAET,IAAMC,EAAS,CACb1B,KAAMS,GAERnB,IAAMC,KAAK,QAASmC,GACjBjC,MAAK,WACJC,OAAOC,SAASC,aAU8CkB,UAAWN,EAAQH,QAAjF,aCpCRf,IAAMqC,SAASC,QAAQrC,KAAK,+BAAiC,IAE7D,IAuCesC,EAhCH,WAAO,IAAD,EACU3C,qBADV,mBACT4C,EADS,KACFC,EADE,KAUhB,OAPAlC,qBAAU,WAVK,IAACmC,KAWL,QATTA,EAAWC,wBAAqCD,EAE3C1C,IAAM4C,IAAIF,IAQZvC,MAAK,SAAU0C,GACdJ,EAASI,EAASlD,WAErB,IAGD,yBAAK6B,UAAU,OACb,4BAAQA,UAAU,cAChB,6BACE,kBAAC,EAAD,OAEF,6BACGgB,GACmB,IAAjBA,EAAMM,OAEHN,EAAMO,KAAI,SAAAC,GAAI,OACZ,kBAAC,EAAD,CAAUrD,KAAMqD,OAGjB,8CC3BGC,QACW,cAA7B7C,OAAOC,SAAS6C,UAEe,UAA7B9C,OAAOC,SAAS6C,UAEhB9C,OAAOC,SAAS6C,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvD,MAAK,SAAAwD,GACjCA,EAAaC,iB","file":"static/js/main.379bd13b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst TodoCard = props => {\n  const data = props.data;\n  const [itemInfo, setItemInfo] = useState();\n\n  const postTodoStatus = () => {\n    axios.post(\"/todo/\" + data.id + \"/done\")\n      .then(function () {\n        window.location.reload();\n      });\n  }\n\n  useEffect(() => {\n    setItemInfo(data);\n  }, [data])\n\n  return (\n    <div>\n      {\n        itemInfo ?\n          (\n            itemInfo.is_done === true ? (\n              < div onClick={postTodoStatus} >☑ {itemInfo.name}</div>\n            ) : (\n                < div onClick={postTodoStatus} >□ {itemInfo.name}</div>\n              )\n          ) : (\n            <div></div>\n          )\n      }\n    </div >\n  );\n}\n\nexport default TodoCard;","import React, { useState } from 'react';\nimport { FormControl, InputLabel, Input, FormHelperText, Button } from '@material-ui/core';\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport axios from 'axios';\n\nconst useStyle = makeStyles({\n  form: {\n    color: \"white\"\n  },\n  button: {\n    margin: 10\n  }\n})\n\nconst TodoForm = props => {\n  const classes = useStyle(props)\n  const [todoName, setTodoName] = useState(\"\");\n\n  const changeTodo = e => {\n    setTodoName(e.target.value);\n  }\n\n  const postTodo = () => {\n    if (todoName === \"\") {\n      alert(\"未入力です\");\n      return false;\n    }\n    const params = {\n      name: todoName\n    }\n    axios.post(\"/todo\", params)\n      .then(function () {\n        window.location.reload();\n      });\n  }\n\n  return (\n    <div>\n      <FormControl>\n        <InputLabel htmlFor=\"todo_name\" className={classes.form}>Task Name</InputLabel>\n        <Input id=\"todo_name\" aria-describedby=\"my-helper-text\" onChange={changeTodo} className={classes.form} required />\n        <FormHelperText id=\"my-helper-text\" className={classes.form}>タスクの名前を入力してください</FormHelperText>\n        <Button variant=\"outlined\" color=\"inherit\" onClick={postTodo} className={classes.button}>Submit</Button>\n      </FormControl>\n    </div>\n  );\n}\n\nexport default TodoForm;","import React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport TodoCard from \"./Atoms/ItemCard\";\nimport TodoForm from \"./Atoms/Form\";\n\naxios.defaults.headers.post['Access-Control-Allow-Origin'] = '*';\n\nconst getTodos = (endpoint) => {\n  if (process.env.NODE_ENV === \"production\") {\n    endpoint = process.env.REACT_APP_API_ENDPOINT + endpoint;\n  }\n  return axios.get(endpoint);\n}\n\nconst App = () => {\n  const [todos, setTodos] = useState();\n\n  useEffect(() => {\n    getTodos(\"/todo\")\n      .then(function (response) {\n        setTodos(response.data);\n      })\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <TodoForm></TodoForm>\n        </div>\n        <div>\n          {todos ?\n            (todos.length !== 0 ?\n              (\n                todos.map(todo => (\n                  <TodoCard data={todo} />\n                ))\n              ) : (<div>Not found</div>)\n            ) : (<div>Not found</div>)\n          }\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}